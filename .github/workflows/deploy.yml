name: Deploy Java Application to AWS

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: java-app-repo
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: |
        if [ -f "pom.xml" ]; then
          mvn clean test
        elif [ -f "build.gradle" ]; then
          ./gradlew test
        else
          echo "No test configuration found, skipping tests"
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Build application
      run: |
        if [ -f "pom.xml" ]; then
          mvn clean package -DskipTests
        elif [ -f "build.gradle" ]; then
          ./gradlew build -x test
        else
          echo "Creating test JAR file..."
          mkdir -p build/libs src/main/java/com/test
          
          cat > src/main/java/com/test/TestServer.java << 'EOF'
        package com.test;
        
        import com.sun.net.httpserver.HttpServer;
        import com.sun.net.httpserver.HttpHandler;
        import com.sun.net.httpserver.HttpExchange;
        import java.io.*;
        import java.net.InetSocketAddress;
        
        public class TestServer {
            public static void main(String[] args) throws Exception {
                HttpServer server = HttpServer.create(new InetSocketAddress(9000), 0);
                
                server.createContext("/", new HttpHandler() {
                    @Override
                    public void handle(HttpExchange exchange) throws IOException {
                        String response = "Hello from Java Test Server! Time: " + new java.util.Date();
                        exchange.sendResponseHeaders(200, response.length());
                        OutputStream os = exchange.getResponseBody();
                        os.write(response.getBytes());
                        os.close();
                    }
                });
                
                server.createContext("/health", new HttpHandler() {
                    @Override
                    public void handle(HttpExchange exchange) throws IOException {
                        String response = "{\"status\":\"healthy\",\"timestamp\":\"" + new java.util.Date() + "\"}";
                        exchange.getResponseHeaders().set("Content-Type", "application/json");
                        exchange.sendResponseHeaders(200, response.length());
                        OutputStream os = exchange.getResponseBody();
                        os.write(response.getBytes());
                        os.close();
                    }
                });
                
                server.setExecutor(null);
                System.out.println("Server starting on port 9000...");
                server.start();
                System.out.println("Server started successfully on http://localhost:9000");
            }
        }
        EOF
          
          javac -d build/classes src/main/java/com/test/TestServer.java
          cd build/classes
          jar cfe ../libs/project.jar com.test.TestServer com/test/TestServer.class
          cd ../..
        fi
        
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM amazoncorretto:11
        WORKDIR /app
        COPY build/libs/project.jar app.jar
        EXPOSE 9000
        CMD ["java", "-jar", "app.jar"]
        EOF
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Verify security group rule
      run: |
        # Verify security group rule sgr-06156665bc4acd952 allows TCP 9000
        SG_RULE=$(aws ec2 describe-security-groups \
          --group-ids ${{ secrets.SECURITY_GROUP_ID }} \
          --query 'SecurityGroups[0].IpPermissions[?IpProtocol==`tcp` && ToPort==`9000`]' \
          --region $AWS_REGION \
          --output text)
        if [ -z "$SG_RULE" ]; then
          echo "Security group rule for TCP 9000 not found, attempting to add..."
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 9000 \
            --cidr 0.0.0.0/0 \
            --region $AWS_REGION || (echo "Failed to add security group rule, check IAM permissions" && exit 1)
        else
          echo "Security group rule for TCP 9000 verified (sgr-06156665bc4acd952)"
        fi
        
    - name: Validate subnets for ALB
      run: |
        # Check if SUBNET_ID_2 is set
        if [ -z "${{ secrets.SUBNET_ID_2 }}" ]; then
          echo "ERROR: SUBNET_ID_2 is not set in GitHub secrets."
          echo "Please add SUBNET_ID_2 in a different Availability Zone from SUBNET_ID_1."
          echo "Run 'aws ec2 describe-subnets --region ap-south-1' to find a suitable subnet."
          exit 1
        fi
        # Verify subnets are in different AZs
        AZ1=$(aws ec2 describe-subnets --subnet-ids ${{ secrets.SUBNET_ID_1 }} --region $AWS_REGION --query 'Subnets[0].AvailabilityZone' --output text)
        AZ2=$(aws ec2 describe-subnets --subnet-ids ${{ secrets.SUBNET_ID_2 }} --region $AWS_REGION --query 'Subnets[0].AvailabilityZone' --output text)
        if [ "$AZ1" = "$AZ2" ]; then
          echo "ERROR: SUBNET_ID_1 ($AZ1) and SUBNET_ID_2 ($AZ2) are in the same Availability Zone."
          echo "ALB requires subnets in different AZs. Please update SUBNET_ID_2."
          exit 1
        else
          echo "Subnets validated: SUBNET_ID_1 ($AZ1), SUBNET_ID_2 ($AZ2)"
        fi
        
    - name: Create or update Load Balancer
      run: |
        # Check if ALB exists
        ALB_ARN=$(aws elbv2 describe-load-balancers \
          --names java-app-alb \
          --query 'LoadBalancers[0].LoadBalancerArn' \
          --output text \
          --region $AWS_REGION 2>/dev/null || echo "None")
        
        if [ "$ALB_ARN" = "None" ]; then
          echo "Creating new Application Load Balancer..."
          ALB_ARN=$(aws elbv2 create-load-balancer \
            --name java-app-alb \
            --subnets ${{ secrets.SUBNET_ID_1 }} ${{ secrets.SUBNET_ID_2 }} \
            --security-groups ${{ secrets.SECURITY_GROUP_ID }} \
            --scheme internet-facing \
            --type application \
            --ip-address-type ipv4 \
            --region $AWS_REGION \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text) || (echo "Failed to create ALB, check subnets and IAM permissions" && exit 1)
          echo "Created ALB: $ALB_ARN"
          
          # Create Target Group
          TG_ARN=$(aws elbv2 create-target-group \
            --name java-app-targets \
            --protocol HTTP \
            --port 9000 \
            --vpc-id ${{ secrets.VPC_ID }} \
            --target-type instance \
            --health-check-protocol HTTP \
            --health-check-path /health \
            --health-check-interval-seconds 30 \
            --health-check-timeout-seconds 5 \
            --healthy-threshold-count 5 \
            --unhealthy-threshold-count 2 \
            --region $AWS_REGION \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text) || (echo "Failed to create target group, check VPC_ID and IAM permissions" && exit 1)
          echo "Created Target Group: $TG_ARN"
          
          # Create Listener
          aws elbv2 create-listener \
            --load-balancer-arn $ALB_ARN \
            --protocol HTTP \
            --port 80 \
            --default-actions Type=forward,TargetGroupArn=$TG_ARN \
            --region $AWS_REGION || (echo "Failed to create listener" && exit 1)
        else
          echo "Load balancer already exists: $ALB_ARN"
          TG_ARN=$(aws elbv2 describe-target-groups \
            --names java-app-targets \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text \
            --region $AWS_REGION)
        fi
        
    - name: Deploy to EC2
      env:
        DOCKER_IMAGE_URI: ${{ needs.build.outputs.image-uri }}
      run: |
        # Find running EC2 instances with the app tag
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=java-app" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text \
          --region $AWS_REGION)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running EC2 instances found. Creating new instance..."
          
          # Create user data script to install Docker and SSM agent
          cat > user-data.sh << 'EOF'
        #!/bin/bash
        yum update -y
        amazon-linux-extras install docker -y
        systemctl start docker
        systemctl enable docker
        usermod -a -G docker ec2-user
        # Install AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -f awscliv2.zip
        # Ensure SSM agent is installed
        yum install -y amazon-ssm-agent
        systemctl start amazon-ssm-agent
        systemctl enable amazon-ssm-agent
        EOF
          
          # Create new EC2 instance with SSM IAM role and user data
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c55b159cbfafe1f0 \
            --count 1 \
            --instance-type t3.micro \
            --key-name ${{ secrets.EC2_KEY_PAIR_NAME }} \
            --security-group-ids ${{ secrets.SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.SUBNET_ID_1 }} \
            --iam-instance-profile Name=${{ secrets.INSTANCE_PROFILE_NAME }} \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=java-app},{Key=Environment,Value=production}]' \
            --query 'Instances[0].InstanceId' \
            --output text \
            --region $AWS_REGION) || (echo "Failed to create EC2 instance, check AMI, subnet, and IAM permissions" && exit 1)
          
          echo "Created new instance: $INSTANCE_ID"
          
          # Wait for instance to be running and SSM to be ready
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region $AWS_REGION
          aws ssm wait instance-online --instance-ids $INSTANCE_ID --region $AWS_REGION
          
          INSTANCE_IDS=$INSTANCE_ID
        fi
        
        # Update each instance
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Updating instance: $INSTANCE_ID"
          
          # Get instance public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text \
            --region $AWS_REGION)
          
          echo "Instance public IP: $PUBLIC_IP"
          
          # Update the application on the instance using SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo Pulling Docker image: $DOCKER_IMAGE_URI",
              "docker stop java-app || true",
              "docker rm java-app || true",
              "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_IMAGE_URI",
              "docker pull $DOCKER_IMAGE_URI",
              "docker run -d --name java-app -p 9000:9000 --restart unless-stopped $DOCKER_IMAGE_URI",
              "sleep 10",
              "curl -f http://localhost:9000/health || exit 1"
            ]' \
            --region $AWS_REGION \
            --output text \
            --query 'Command.CommandId') || (echo "Failed to send SSM command" && exit 1)
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for SSM command to complete and check status
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region $AWS_REGION || (echo "SSM command failed for $INSTANCE_ID, checking logs..." && \
            aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region $AWS_REGION && exit 1)
        done
        
    - name: Wait for container to be healthy
      run: |
        echo "Waiting for 90 seconds before health check..."
        sleep 90
        for INSTANCE_ID in $(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=java-app" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text \
          --region $AWS_REGION); do
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text \
            --region $AWS_REGION)
          echo "Performing health check on $PUBLIC_IP..."
          for attempt in {1..3}; do
            if curl -f http://$PUBLIC_IP:9000/health; then
              echo "Health check passed for $PUBLIC_IP"
              break
            else
              echo "Health check attempt $attempt failed for $PUBLIC_IP"
              if [ $attempt -eq 3 ]; then
                echo "Health check failed for $PUBLIC_IP after 3 attempts!"
                # Fetch container logs for debugging
                COMMAND_ID=$(aws ssm send-command \
                  --instance-ids $INSTANCE_ID \
                  --document-name "AWS-RunShellScript" \
                  --parameters 'commands=["docker logs java-app"]' \
                  --region $AWS_REGION \
                  --output text \
                  --query 'Command.CommandId')
                aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region $AWS_REGION
                aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --region $AWS_REGION
                exit 1
              fi
              sleep 30
            fi
          done
        done
        
    - name: Register instances with Load Balancer
      run: |
        # Get target group ARN
        TG_ARN=$(aws elbv2 describe-target-groups \
          --names java-app-targets \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text \
          --region $AWS_REGION) || (echo "Failed to find target group java-app-targets" && exit 1)
        
        # Register new instances with target group
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=java-app" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text \
          --region $AWS_REGION)
        
        for INSTANCE_ID in $INSTANCE_IDS; do
          aws elbv2 register-targets \
            --target-group-arn $TG_ARN \
            --targets Id=$INSTANCE_ID,Port=9000 \
            --region $AWS_REGION || echo "Target already registered"
        done
        
    - name: Deployment Summary
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📦 Docker image: ${{ needs.build.outputs.image-uri }}"
        echo "🌍 Region: $AWS_REGION"
        echo "📝 Check AWS console for detailed status"
        
        # Get load balancer URL
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names java-app-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region $AWS_REGION 2>/dev/null || echo "Not found")
        
        if [ "$ALB_DNS" != "Not found" ]; then
          echo "🌐 Application URL: http://$ALB_DNS"
        fi
